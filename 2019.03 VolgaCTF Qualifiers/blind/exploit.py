#!/usr/bin/env python3
import base64
import telnetlib
import os
import shlex

import gmpy2

N = 26507591511689883990023896389022361811173033984051016489514421457013639621509962613332324662222154683066173937658495362448733162728817642341239457485221865493926211958117034923747221236176204216845182311004742474549095130306550623190917480615151093941494688906907516349433681015204941620716162038586590895058816430264415335805881575305773073358135217732591500750773744464142282514963376379623449776844046465746330691788777566563856886778143019387464133144867446731438967247646981498812182658347753229511846953659235528803754112114516623201792727787856347729085966824435377279429992530935232902223909659507613583396967
E = 65537


def main():
    attack('blind.q.2019.volgactf.ru', 7070)


def attack(ip, port):
    conn = telnetlib.Telnet(ip, port)
    conn.set_debuglevel(9999)
    cmd = 'cat flag'
    sig = sign_message(conn, cmd.encode())
    conn.read_until(b'Enter your command:\r\n')
    conn.write('{} {}\n'.format(sig, cmd).encode())
    conn.read_some()


def sign_message(conn, msg):
    msg_int = int.from_bytes(msg, 'big')
    k = 1
    forbidden_chars = [b'"', b"'", b' ', b'#', b'\r', b'\n', b'\t']
    while True:
        k += 1
        k_inv = int(gmpy2.invert(k, N))
        tmp = k_inv.to_bytes(2048, 'big').lstrip(b'\x00')
        if any(x in tmp for x in forbidden_chars):
            continue
        to_sign = msg_int * k
        tmp2 = to_sign.to_bytes(2048, 'big').lstrip(b'\x00')
        if any(x in tmp2 for x in forbidden_chars):
            continue
        break
    
    m1 = k_inv.to_bytes(2048, 'big').lstrip(b'\x00')
    sig1 = sign_message_raw(conn, m1, 'k_inv')
    assert pow(sig1, E, N) == int.from_bytes(m1, 'big')

    m2 = to_sign.to_bytes(2048, 'big').lstrip(b'\x00')
    sig2 = sign_message_raw(conn, m2, 'to_sign')
    assert pow(sig2, E, N) == int.from_bytes(m2, 'big')

    return (sig1 * sig2) % N


def sign_message_raw(conn, msg, what):
    print('Requesting signature for ', what, msg)
    print('Length: ', len(msg))
    conn.read_until(b'Enter your command:\r\n')
    conn.write(b'1 sign\n')
    conn.read_until(b'Enter your command to sign:\r\n')
    assert int.from_bytes(msg, 'big') < N
    conn.write(base64.b64encode(msg) + b'\n')
    sig = int(conn.read_until(b'\r\n').strip())
    assert sig < N
    assert int.from_bytes(msg, 'big') == pow(sig, E, N)
    return sig


if __name__ == '__main__':
    main()
